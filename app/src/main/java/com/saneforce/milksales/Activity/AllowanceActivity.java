package com.saneforce.milksales.Activity;import android.animation.ArgbEvaluator;import android.animation.ObjectAnimator;import android.animation.ValueAnimator;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.location.Location;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.text.InputFilter;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.google.gson.Gson;import com.google.gson.JsonArray;import com.google.gson.JsonObject;import com.google.gson.reflect.TypeToken;import com.saneforce.milksales.Activity_Hap.AllowancCapture;import com.saneforce.milksales.Activity_Hap.Checkin;import com.saneforce.milksales.Activity_Hap.CustomListViewDialog;import com.saneforce.milksales.Activity_Hap.Dashboard;import com.saneforce.milksales.Activity_Hap.Dashboard_Two;import com.saneforce.milksales.Activity_Hap.ERT;import com.saneforce.milksales.Activity_Hap.Help_Activity;import com.saneforce.milksales.Activity_Hap.PayslipFtp;import com.saneforce.milksales.Activity_Hap.ProductImageView;import com.saneforce.milksales.Common_Class.CameraPermission;import com.saneforce.milksales.Common_Class.Common_Class;import com.saneforce.milksales.Common_Class.Common_Model;import com.saneforce.milksales.Common_Class.Shared_Common_Pref;import com.saneforce.milksales.Interface.ApiClient;import com.saneforce.milksales.Interface.ApiInterface;import com.saneforce.milksales.Interface.LocationEvents;import com.saneforce.milksales.Interface.Master_Interface;import com.saneforce.milksales.Interface.OnImagePickListener;import com.saneforce.milksales.Model_Class.ModeOfTravel;import com.saneforce.milksales.R;import com.saneforce.milksales.common.LocationFinder;import com.saneforce.milksales.common.LocationReceiver;import com.saneforce.milksales.common.SANGPSTracker;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.lang.reflect.Type;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import br.com.simplepass.loading_button_lib.customViews.CircularProgressButton;import id.zelory.compressor.Compressor;import okhttp3.MultipartBody;import okhttp3.RequestBody;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class AllowanceActivity extends AppCompatActivity implements View.OnClickListener, Master_Interface {    final Handler handler = new Handler();    LinearLayout BikeMode, BusMode, ReasonPhoto, ProofImage, BusTo, linCheckdriver, linVwContStay;    CardView ModeTravel, BusCardTo, CardDailyAllowance, CardOthPlc;    TextView TextMode, TextToAddress, dailyAllowance;    EditText StartKm, BusFrom, EditRemarks, txtOthPlc;    ImageView attachedImage;    CircularProgressButton SubmitValue;    SharedPreferences UserDetails, CheckInDetails;    Shared_Common_Pref shared_common_pref;    CheckBox driverAllowance;    Common_Model mCommon_model_spinner, Model_Pojo;    List<Common_Model> listOrderType = new ArrayList<>();    List<Common_Model> modelRetailDetails = new ArrayList<>();    List<Common_Model> modelTravelType = new ArrayList<>();    CustomListViewDialog customDialog;    Boolean updateMode = false;    Common_Class common_class;    Gson gson;    List<ModeOfTravel> modelOfTravel;    Type userType;    ApiInterface apiInterface;    String startEnd = "", modeId = "", tpData = "", imageConvert = "", imageServer = "", StrToCode = "", STRCode = "",            DriverNeed = "false", DriverMode = "", modeTypeVale = "", mode = "", modeVal = "", StartedKM = "",            FromKm = "", ToKm = "", StToEnd = "", StrID = "", driverAllowanceBoolean = "",            CheckInfo = "CheckInDetail", Name = "Allowance", UserInfo = "MyPrefs", MOT = "ModeOfTravel", RecallMode = "";    Location mlocation;    String UKey = "";    CheckBox cbReturnHQ;    private SANGPSTracker mLUService;    private boolean mBound = false;    private final ServiceConnection mServiceConection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            mLUService = ((SANGPSTracker.LocationBinder) service).getLocationUpdateService(getApplicationContext());            mBound = true;        }        @Override        public void onServiceDisconnected(ComponentName name) {            mLUService = null;            mBound = false;        }    };    private LocationReceiver myReceiver;    private ArrayList<String> travelTypeList;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_allowance);        Get_MydayPlan();        gson = new Gson();        common_class = new Common_Class(this);        shared_common_pref = new Shared_Common_Pref(this);        CheckInDetails = getSharedPreferences(CheckInfo, Context.MODE_PRIVATE);        UserDetails = getSharedPreferences(UserInfo, Context.MODE_PRIVATE);        UKey = UserDetails.getString("Sfcode", "") + "-" + (new Date().getTime());        apiInterface = ApiClient.getClient().create(ApiInterface.class);        ModeTravel = findViewById(R.id.card_travel_mode);        BikeMode = findViewById(R.id.bike_mode);        BusMode = findViewById(R.id.bus_mode);        ReasonPhoto = findViewById(R.id.reason_photo);        StartKm = findViewById(R.id.edt_km);        BusFrom = findViewById(R.id.edt_frm);        BusCardTo = findViewById(R.id.card_bus_mode);        ProofImage = findViewById(R.id.proof_pic);        attachedImage = findViewById(R.id.capture_img);        EditRemarks = findViewById(R.id.edt_rmk);        SubmitValue = findViewById(R.id.btn_submit);        TextMode = findViewById(R.id.txt_mode);        TextToAddress = findViewById(R.id.edt_to);        CardDailyAllowance = findViewById(R.id.card_daily_allowance);        dailyAllowance = findViewById(R.id.text_daily_allowance);        driverAllowance = findViewById(R.id.da_driver_allowance);        linCheckdriver = findViewById(R.id.lin_check_driver);        linVwContStay = findViewById(R.id.vwContStay);        CardOthPlc = findViewById(R.id.CardOthPlc);        txtOthPlc = findViewById(R.id.txtOthPlc);        new LocationFinder(getApplication(), new LocationEvents() {            @Override            public void OnLocationRecived(Location location) {                mlocation = location;            }        });        modelTravelType.clear();        dynamicMode();        linVwContStay.setVisibility(View.GONE);        StartKm.setFilters(new InputFilter[]{new Common_Class.InputFilterMinMax(0, 99999999), new InputFilter.LengthFilter(6)});        RecallMode = String.valueOf(getIntent().getSerializableExtra("Recall"));        BusTo = findViewById(R.id.lin_to_place);        getToolbar();        BusToValue();        tpData = String.valueOf(getIntent().getSerializableExtra("My_Day_Plan"));        ModeTravel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelTravelType, 8);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }        });        BusCardTo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelRetailDetails, 10);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }        });        ProofImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.v("MODE_ID", "DATA " + modeId);                CameraPermission cameraPermission = new CameraPermission(AllowanceActivity.this, getApplicationContext());                if (!cameraPermission.checkPermission()) {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {                        cameraPermission.requestPermission();                    }                    Log.v("PERMISSION_NOT", "PERMISSION_NOT");                } else {                    Log.v("PERMISSION", "PERMISSION");                    AllowancCapture.setOnImagePickListener(new OnImagePickListener() {                        @Override                        public void OnImageURIPick(Bitmap image, String FileName, String fullPath) {//                            imageServer = FileName;//                            imageConvert = fullPath;//                            attachedImage.setImageBitmap(image);//                            attachedImage.setVisibility(View.VISIBLE);//                            UploadPhoto(fullPath, UserDetails.getString("Sfcode", ""), FileName, "Travel", image);                        }                    });                    Intent intent = new Intent(AllowanceActivity.this, AllowancCapture.class);                    intent.putExtra("allowance", "One");                    startActivity(intent);                }            }        });        attachedImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getApplicationContext(), ProductImageView.class);                intent.putExtra("ImageUrl", imageConvert);                startActivity(intent);            }        });        SubmitValue.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (SubmitValue.isAnimating()) return;                SubmitValue.startAnimation();                common_class.ProgressdialogShow(1, "Validating Please wait...");                handler.postDelayed(new Runnable() {                    @Override                    public void run() {                        int flg = 0;                        String sMsgV = "";                        if (TextMode.getText().toString().matches("")) {                            sMsgV = "Choose Mode of Travel";                        } else {                            if (modeVal.equals("0") || startEnd.equals("0")) {                                if (dailyAllowance.getText().toString().matches("")) {                                    sMsgV = "Choose daily allowance";                                } else if (!cbReturnHQ.isChecked() && BusFrom.getText().toString().matches("")) {                                    sMsgV = "Choose from Address";                                } else if (TextToAddress.getText().toString().matches("") && !dailyAllowance.getText().toString().equalsIgnoreCase("hq")) {                                    sMsgV = "Enter To Address";                                }                            } else {                                if (dailyAllowance.getText().toString().matches("") && sMsgV.equalsIgnoreCase("")) {                                    sMsgV = "Choose daily allowance";                                } else if (BusFrom.getText().toString().matches("") && sMsgV.equalsIgnoreCase("")) {                                    sMsgV = "Enter the From Place";                                } else if (TextMode.getText().toString().matches("") && sMsgV.equalsIgnoreCase("")) {                                    sMsgV = "Choose Mode of Travel";                                } else if (!dailyAllowance.getText().toString().equalsIgnoreCase("hq")) {                                    if (StrToCode.equalsIgnoreCase("") && sMsgV.equalsIgnoreCase("")) {                                        sMsgV = "Select the To Place";                                    } else if (StrToCode.equalsIgnoreCase("-1") && txtOthPlc.getText().toString().equalsIgnoreCase("") && sMsgV.equalsIgnoreCase("")) {                                        sMsgV = "Enter the To Other Place";                                    }                                }                                if (StartKm.getText().toString().matches("") && sMsgV.equalsIgnoreCase("")) {                                    sMsgV = "Enter the Start Km";                                } else if (imageConvert.matches("") && sMsgV.equalsIgnoreCase("")) {                                    sMsgV = "Choose Start Photo";                                }                            }                        }                        if (sMsgV != "") {                            Toast.makeText(AllowanceActivity.this, sMsgV, Toast.LENGTH_SHORT).show();                            ResetSubmitBtn(0);                        } else {                            if (mlocation != null) {                                common_class.ProgressdialogShow(1, "Submitting please wait...");                                submitData();                            } else {                                common_class.ProgressdialogShow(1, "getting location please wait...");                                new LocationFinder(getApplication(), new LocationEvents() {                                    @Override                                    public void OnLocationRecived(Location location) {                                        mlocation = location;                                        common_class.ProgressdialogShow(1, "Submitting please wait...");                                        submitData();                                    }                                });                            }                        }                    }                }, 500);            }        });        CardDailyAllowance.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                listOrderType.clear();                OrderType();            }        });        driverAllowance.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    driverAllowanceBoolean = "true";                } else {                    driverAllowanceBoolean = "false";                    DriverNeed = "";                }            }        });        cbReturnHQ = findViewById(R.id.cbReturnHQ);        cbReturnHQ.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {                if (isChecked) {                    findViewById(R.id.cvFromPlace).setVisibility(View.GONE);                    findViewById(R.id.tvToLabel).setVisibility(View.GONE);                    TextToAddress.setHint("From Place");                } else {                    findViewById(R.id.cvFromPlace).setVisibility(View.VISIBLE);                    findViewById(R.id.tvToLabel).setVisibility(View.VISIBLE);                    TextToAddress.setHint("To Place");                }            }        });    }    /* Order Types*/    public void OrderType() {        travelTypeList = new ArrayList<>();        travelTypeList.add("HQ");        travelTypeList.add("EXQ");        travelTypeList.add("Out Station");        travelTypeList.add("None");        for (int i = 0; i < travelTypeList.size(); i++) {            String id = String.valueOf(travelTypeList.get(i));            String name = travelTypeList.get(i);            mCommon_model_spinner = new Common_Model(id, name, "flag");            listOrderType.add(mCommon_model_spinner);        }        customDialog = new CustomListViewDialog(AllowanceActivity.this, listOrderType, 100);        Window window = customDialog.getWindow();        window.setGravity(Gravity.CENTER);        window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);        customDialog.show();    }    public void getToolbar() {        TextView txtHelp = findViewById(R.id.toolbar_help);        ImageView imgHome = findViewById(R.id.toolbar_home);        txtHelp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), Help_Activity.class));            }        });        TextView txtErt = findViewById(R.id.toolbar_ert);        TextView txtPlaySlip = findViewById(R.id.toolbar_play_slip);        txtErt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), ERT.class));            }        });        txtPlaySlip.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), PayslipFtp.class));            }        });        ObjectAnimator textColorAnim;        textColorAnim = ObjectAnimator.ofInt(txtErt, "textColor", Color.WHITE, Color.TRANSPARENT);        textColorAnim.setDuration(500);        textColorAnim.setEvaluator(new ArgbEvaluator());        textColorAnim.setRepeatCount(ValueAnimator.INFINITE);        textColorAnim.setRepeatMode(ValueAnimator.REVERSE);        textColorAnim.start();        imgHome.setVisibility(View.GONE);        imgHome.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openHome();            }        });    }    public void openHome() {        Boolean CheckIn = CheckInDetails.getBoolean("CheckIn", false);        Shared_Common_Pref.Sf_Code = UserDetails.getString("Sfcode", "");        Shared_Common_Pref.Sf_Name = UserDetails.getString("SfName", "");        Shared_Common_Pref.Div_Code = UserDetails.getString("Divcode", "");        Shared_Common_Pref.StateCode = UserDetails.getString("State_Code", "");        if (CheckIn == true) {            Intent Dashboard = new Intent(AllowanceActivity.this, Dashboard_Two.class);            Dashboard.putExtra("Mode", "CIN");            startActivity(Dashboard);        } else            startActivity(new Intent(getApplicationContext(), Dashboard.class));    }    /*Choosing Dynamic Mode*/    public void dynamicMode() {        Map<String, String> QueryString = new HashMap<>();        QueryString.put("axn", "table/list");        QueryString.put("divisionCode", Shared_Common_Pref.Div_Code);        QueryString.put("sfCode", Shared_Common_Pref.Sf_Code);        QueryString.put("rSF", Shared_Common_Pref.Sf_Code);        QueryString.put("State_Code", Shared_Common_Pref.StateCode);        String commonLeaveType = "{\"tableName\":\"getmodeoftravel\",\"coloumns\":\"[\\\"id\\\",\\\"name\\\",\\\"Leave_Name\\\"]\",\"orderBy\":\"[\\\"name asc\\\"]\",\"desig\":\"mgr\"}";        ApiInterface service = ApiClient.getClient().create(ApiInterface.class);        Call<Object> call = service.GetRouteObjects(QueryString, commonLeaveType);        call.enqueue(new Callback<Object>() {            @Override            public void onResponse(Call<Object> call, Response<Object> response) {                userType = new TypeToken<ArrayList<ModeOfTravel>>() {                }.getType();                modelOfTravel = gson.fromJson(new Gson().toJson(response.body()), userType);                for (int i = 0; i < modelOfTravel.size(); i++) {                    String id = String.valueOf(modelOfTravel.get(i).getStEndNeed());                    String name = modelOfTravel.get(i).getName();                    String modeId = String.valueOf(modelOfTravel.get(i).getId());                    String driverMode = String.valueOf(modelOfTravel.get(i).getDriverNeed());                    Model_Pojo = new Common_Model(id, name, modeId, driverMode);                    modelTravelType.add(Model_Pojo);                }            }            @Override            public void onFailure(Call<Object> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    public void BusToValue() {        JSONObject jj = new JSONObject();        try {            jj.put("sfCode", UserDetails.getString("Sfcode", ""));            jj.put("divisionCode", UserDetails.getString("Divcode", ""));        } catch (JSONException e) {            e.printStackTrace();        }        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);        Call<JsonArray> call = apiInterface.getBusTo(jj.toString());        call.enqueue(new Callback<JsonArray>() {            @Override            public void onResponse(Call<JsonArray> call, Response<JsonArray> response) {                JsonArray jsonArray = response.body();                for (int a = 0; a < jsonArray.size(); a++) {                    JsonObject jsonObject = (JsonObject) jsonArray.get(a);                    updateMode = true;                    String id = String.valueOf(jsonObject.get("id"));                    String name = String.valueOf(jsonObject.get("name"));                    String townName = String.valueOf(jsonObject.get("ODFlag"));                    name = name.replaceAll("^[\"']+|[\"']+$", "");                    id = id.replaceAll("^[\"']+|[\"']+$", "");                    mCommon_model_spinner = new Common_Model(id, name, "");                    modelRetailDetails.add(mCommon_model_spinner);                }                mCommon_model_spinner = new Common_Model("-1", "Other Location", "");                modelRetailDetails.add(mCommon_model_spinner);            }            @Override            public void onFailure(Call<JsonArray> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    public MultipartBody.Part convertimg(String tag, String path) {        MultipartBody.Part yy = null;        try {            if (!TextUtils.isEmpty(path)) {                File file = new File(path);                if (path.contains(".png") || path.contains(".jpg") || path.contains(".jpeg"))                    file = new Compressor(getApplicationContext()).compressToFile(new File(path));                else                    file = new File(path);                RequestBody requestBody = RequestBody.create(MultipartBody.FORM, file);                yy = MultipartBody.Part.createFormData(tag, file.getName(), requestBody);            }        } catch (Exception e) {        }        return yy;    }    private void UploadPhoto(String path, String SF, String FileName, String Mode, Bitmap image) {        try {            common_class.ProgressdialogShow(1, "");            MultipartBody.Part imgg;            if (path != null && (path.endsWith(".png") || path.endsWith(".jpg") || path.endsWith(".jpeg"))) {                imgg = convertimg("file", path);            } else {                common_class.ProgressdialogShow(0, "");                common_class.showMsg(this, "Image file only supported");                return;            }            ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);            Call<ResponseBody> mCall = apiInterface.onTAFileUpload(SF, FileName, Mode, imgg);            Log.e("SEND_IMAGE_SERVER", mCall.request().toString());            mCall.enqueue(new Callback<ResponseBody>() {                @Override                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                    try {                        if (response.isSuccessful()) {                            JSONObject js = new JSONObject(response.body().string());                            Log.v("Res", js.toString());                            if (js.getBoolean("success")) {                                if (image != null) {                                    imageServer = FileName;                                    imageConvert = path;                                    attachedImage.setImageBitmap(image);                                    attachedImage.setVisibility(View.VISIBLE);                                }                                common_class.ProgressdialogShow(0, "");                                common_class.showMsg(AllowanceActivity.this, "File uploading successful ");                            } else {                                common_class.ProgressdialogShow(0, "");                                common_class.showMsg(AllowanceActivity.this, "Failed.Try Again...");                            }                        } else {                            common_class.ProgressdialogShow(0, "");                            common_class.showMsg(AllowanceActivity.this, "Failed.Try Again...");                        }                    } catch (Exception e) {                        common_class.ProgressdialogShow(0, "");                        common_class.showMsg(AllowanceActivity.this, "Failed.Try Again...");                    }                }                @Override                public void onFailure(Call<ResponseBody> call, Throwable t) {                    common_class.ProgressdialogShow(0, "");                    common_class.showMsg(AllowanceActivity.this, "Failed.Try Again...");                    Log.e("SEND_IMAGE_Response", "ERROR");                }            });        } catch (Exception e) {            Log.e("TAClaim:", e.getMessage());        }    }    /*Submit*/    public void submitData() {//        Intent mIntent = new Intent(this, FileUploadService.class);//        mIntent.putExtra("mFilePath", imageConvert);//        mIntent.putExtra("SF", UserDetails.getString("Sfcode",""));//        mIntent.putExtra("FileName", imageServer);//        mIntent.putExtra("Mode", "Travel");//        FileUploadService.enqueueWork(this, mIntent);        String Mode = TextMode.getText().toString();        try {            JSONObject jj = new JSONObject();            jj.put("km", StartKm.getText().toString());            jj.put("rmk", StartKm.getText().toString());            jj.put("UKey", UKey);            jj.put("mod", modeId);            jj.put("mode_name", TextMode.getText().toString());            jj.put("StEndNeed", StToEnd);            jj.put("sf", UserDetails.getString("Sfcode", ""));            jj.put("div", UserDetails.getString("Divcode", ""));            jj.put("url", imageServer);            jj.put("from", BusFrom.getText().toString());            if (StrToCode.equalsIgnoreCase("-1")) {                jj.put("to", txtOthPlc.getText());            } else {                jj.put("to", TextToAddress.getText().toString());            }            jj.put("to_code", StrToCode);            jj.put("dailyAllowance", dailyAllowance.getText().toString());            DriverNeed = "false";            if (driverAllowance.isChecked()) DriverNeed = "true";            jj.put("driverAllowance", DriverNeed);            jj.put("location", mlocation.getLatitude() + ":" + mlocation.getLongitude());            jj.put("returnHQ", cbReturnHQ.isChecked() ? 1 : 0);            Log.v("printing_allow", jj.toString());            Call<ResponseBody> Callto;            ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);            if (RecallMode.equalsIgnoreCase("Recall")) {                Callto = apiInterface.RecallSave(jj.toString());            } else {                Callto = apiInterface.saveAllowance(jj.toString());            }            Log.v("Recall_request", Callto.request().toString());            Callto.enqueue(new Callback<ResponseBody>() {                @Override                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                    try {                        common_class.ProgressdialogShow(0, "");                        if (response.isSuccessful()) {                            Log.v("Recall_Respone", response.body().toString());                            String jsonData = null;                            jsonData = response.body().string();                            JSONObject js = new JSONObject(jsonData);                            if (js.getString("success").equalsIgnoreCase("true")) {                                Toast.makeText(AllowanceActivity.this, " Submitted successfully ", Toast.LENGTH_SHORT).show();                                ResetSubmitBtn(1);                                shared_common_pref.save(Shared_Common_Pref.DAMode, true);                                mLUService = new SANGPSTracker(AllowanceActivity.this);                                myReceiver = new LocationReceiver();                                bindService(new Intent(AllowanceActivity.this, SANGPSTracker.class), mServiceConection,                                        Context.BIND_AUTO_CREATE);                                LocalBroadcastManager.getInstance(AllowanceActivity.this).registerReceiver(myReceiver,                                        new IntentFilter(SANGPSTracker.ACTION_BROADCAST));                                mLUService.requestLocationUpdates();                                common_class.CommonIntentwithFinish(Dashboard.class);                                if (RecallMode.equalsIgnoreCase("Recall")) {                                    Intent takePhoto = new Intent(getApplicationContext(), Checkin.class);                                    takePhoto.putExtra("Mode", "CIN");                                    takePhoto.putExtra("ShiftId", CheckInDetails.getString("Shift_Selected_Id", ""));                                    takePhoto.putExtra("ShiftName", CheckInDetails.getString("Shift_Name", ""));                                    takePhoto.putExtra("On_Duty_Flag", CheckInDetails.getString("On_Duty_Flag", "0"));                                    takePhoto.putExtra("ShiftStart", CheckInDetails.getString("ShiftStart", "0"));                                    takePhoto.putExtra("ShiftEnd", CheckInDetails.getString("ShiftEnd", "0"));                                    takePhoto.putExtra("ShiftCutOff", CheckInDetails.getString("ShiftCutOff", "0"));                                    startActivity(takePhoto);                                }                            } else {                                ResetSubmitBtn(2);                                Toast.makeText(AllowanceActivity.this, " Cannot submitted the data ", Toast.LENGTH_SHORT).show();                            }                        }                    } catch (Exception e) {                        ResetSubmitBtn(2);                        Toast.makeText(AllowanceActivity.this, e.getLocalizedMessage(), Toast.LENGTH_SHORT).show();                    }                }                @Override                public void onFailure(Call<ResponseBody> call, Throwable t) {                    ResetSubmitBtn(2);                    Toast.makeText(AllowanceActivity.this, t.getLocalizedMessage(), Toast.LENGTH_SHORT).show();                }            });        } catch (Exception e) {            ResetSubmitBtn(0);            Toast.makeText(AllowanceActivity.this, e.getLocalizedMessage(), Toast.LENGTH_SHORT).show();        }    }    public void ResetSubmitBtn(int resetMode) {        common_class.ProgressdialogShow(0, "");        long dely = 10;        if (resetMode != 0) dely = 1000;        if (resetMode == 1) {            SubmitValue.doneLoadingAnimation(getResources().getColor(R.color.green), BitmapFactory.decodeResource(getResources(), R.drawable.done));        } else {            SubmitValue.doneLoadingAnimation(getResources().getColor(R.color.color_red), BitmapFactory.decodeResource(getResources(), R.drawable.ic_wrong));        }        handler.postDelayed(new Runnable() {            @Override            public void run() {                SubmitValue.stopAnimation();                SubmitValue.revertAnimation();            }        }, dely);    }    @Override    public void onBackPressed() {    }    @Override    public void onClick(View v) {    }    @Override    public void OnclickMasterType(List<Common_Model> myDataset, int position, int type) {        customDialog.dismiss();        if (type == 8) {            TextMode.setText(myDataset.get(position).getName());            startEnd = myDataset.get(position).getId();            StrID = myDataset.get(position).getId();            DriverMode = myDataset.get(position).getCheckouttime();            modeId = myDataset.get(position).getFlag();            Log.e("modeId", modeId);            if (startEnd.equals("0")) {                mode = "11";                BikeMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            } else {                mode = "12";                BikeMode.setVisibility(View.VISIBLE);                //  BusMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            }            attachedImage.setImageResource(0);            if (DriverMode.equals("1")) {                linCheckdriver.setVisibility(View.VISIBLE);            } else {                linCheckdriver.setVisibility(View.GONE);            }            DriverNeed = "";            driverAllowance.setChecked(false);            if (attachedImage.getDrawable() == null) {                Log.e("Image_Draw_able", "Null_Image_View");            } else {                Log.e("Image_Draw_able", "Not_Null_Image_View");            }        } else if (type == 10) {            TextToAddress.setText(myDataset.get(position).getName());            StrToCode = myDataset.get(position).getId();            CardOthPlc.setVisibility(View.GONE);            if (StrToCode.equalsIgnoreCase("-1")) {                CardOthPlc.setVisibility(View.VISIBLE);            }            Log.e("STRTOCOD", StrToCode);        } else if (type == 100) {            String TrTyp = myDataset.get(position).getName();            dailyAllowance.setText(TrTyp);            if (TrTyp.equals("HQ")) {                BusTo.setVisibility(View.GONE);            } else {                BusTo.setVisibility(View.VISIBLE);            }            TextToAddress.setText("");        }    }    private void Get_MydayPlan() {        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        String currentDateandTime = sdf.format(new Date());        Map<String, String> QueryString = new HashMap<>();        QueryString.put("axn", "Get/Tp_dayplan");        QueryString.put("Sf_code", Shared_Common_Pref.Sf_Code);        QueryString.put("Date", currentDateandTime);        QueryString.put("divisionCode", Shared_Common_Pref.Div_Code);        QueryString.put("desig", "MGR");        JSONArray jsonArray = new JSONArray();        JSONObject jsonObject = new JSONObject();        JSONObject sp = new JSONObject();        jsonArray.put(jsonObject);        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);        Call<JsonObject> mCall = apiInterface.DCRSave(QueryString, jsonArray.toString());        Log.e("Log_TpQuerySTring", QueryString.toString());        Log.e("Log_Tp_SELECT", jsonArray.toString());        mCall.enqueue(new Callback<JsonObject>() {            @Override            public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {                try {                    JSONObject jsonObject = new JSONObject(new Gson().toJson(response.body()));                    Log.e("GettodayResult", "response Tp_View: " + jsonObject.getJSONArray("GettodayResult"));                    JSONArray jsoncc = jsonObject.getJSONArray("GettodayResult");                    Log.e("LENGTH", String.valueOf(jsoncc.length()));                    if (jsoncc.length() > 0) {                        Log.v("MODE_OF_VALUE_Tp", tpData);                        if (tpData.equals("One")) {                            modeId = jsoncc.getJSONObject(0).getString("Mot_ID");                            STRCode = jsoncc.getJSONObject(0).getString("To_Place_ID");                            StrToCode = jsoncc.getJSONObject(0).getString("To_Place_ID");                            modeVal = jsoncc.getJSONObject(0).getString("Mode_Travel_Id");                            Log.v("MODE_OF_VALUE", modeVal);                            Log.v("MODE_OF_VALUE", modeId);                            Log.v("MODE_OF_VALUE", STRCode);                            if (modeVal.equals("0")) {                                Log.v("MODE_OF_VALUE", "111");                                TextMode.setText(modeTypeVale);                                BusMode.setVisibility(View.VISIBLE);                                BikeMode.setVisibility(View.GONE);                                ReasonPhoto.setVisibility(View.VISIBLE);                                TextMode.setText(String.valueOf(jsoncc.getJSONObject(0).get("MOT")));                                BusFrom.setText(String.valueOf(jsoncc.getJSONObject(0).get("From_Place")));                                TextToAddress.setText(String.valueOf(jsoncc.getJSONObject(0).get("To_Place")));                                dailyAllowance.setText(String.valueOf(jsoncc.getJSONObject(0).get("DA_Type")));                            } else {                                Log.v("MODE_OF_VALUE", "222");                                TextMode.setText(modeTypeVale);                                BusMode.setVisibility(View.VISIBLE);                                BikeMode.setVisibility(View.VISIBLE);                                ReasonPhoto.setVisibility(View.VISIBLE);                                StartKm.setText(StartedKM);                                TextMode.setText(String.valueOf(jsoncc.getJSONObject(0).get("MOT")));                                BusFrom.setText(String.valueOf(jsoncc.getJSONObject(0).get("From_Place")));                                TextToAddress.setText(String.valueOf(jsoncc.getJSONObject(0).get("To_Place")));                                if (jsoncc.getJSONObject(0).get("DA_Type").equals("HQ")) {                                    BusTo.setVisibility(View.GONE);                                } else {                                    BusTo.setVisibility(View.VISIBLE);                                }                                dailyAllowance.setText(String.valueOf(jsoncc.getJSONObject(0).get("DA_Type")));                            }                            if (String.valueOf(jsoncc.getJSONObject(0).get("Driver_Allow")).equals("1")) {                                linCheckdriver.setVisibility(View.VISIBLE);                                driverAllowance.setChecked(true);                            } else {                                linCheckdriver.setVisibility(View.GONE);                                driverAllowance.setChecked(false);                            }                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<JsonObject> call, Throwable t) {            }        });    }}